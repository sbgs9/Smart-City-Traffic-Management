# generated by fastapi-codegen:
#   filename:  smartCity.yaml
#   timestamp: 2024-04-21T21:49:43+00:00

from __future__ import annotations

import os
from typing import List, Union

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from models import (
    Camera,
    Cameraimage,
    ErrorModel,
    Iotanalytics,
    Iotstation,
    Servicerequest,
)

import MySQLdb
import pymongo

# MYSQL_IP=13.57.253.133
db_config = {
    'host': os.environ.get("MYSQL_IP"),
    'user': 'root',
    'passwd': 'cmpe-281',
    'db': 'smartCity',
    'port': 3306
}

conn = MySQLdb.connect(**db_config)

# MONGO_IP=54.67.39.165
mongodbUrl = "mongodb://%s:27017/" % (os.environ.get("MONGO_IP"))
client = pymongo.MongoClient(mongodbUrl, username='user', password='cmpe-281')
db = client["smartCity"]

iotAnalytics = db["iotAnalytics"]
cameraImage = db["cameraImage"]

app = FastAPI(
    version='1.0.0',
    title='CCTV Cameras',
    description='API for CCTV Cameras and IOT Stations',
    contact={'name': 'Sahus Nulu', 'email': 'sahus.nulu@sjsu.edu'},
)

origins = [
    "http://localhost:5173",
    "http://localhost:3000",
    "http://localhost:8080"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],

)


@app.post(
    '/camera',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def add_camera(body: Camera) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "INSERT INTO camera (id, name, latitude, longitude, inService, streamingUrl) VALUES (%s, %s, %s, %s, %s, %s);"
    cursor.execute(query, (body.id, body.name, body.latitude, body.longitude, body.inService, body.streamingUrl))
    conn.commit()
    cursor.close()


@app.get(
    '/cameras',
    response_model=Union[List[Camera], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def get_camera_list() -> Union[List[Camera], ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM camera;"
    cursor.execute(query)
    items = cursor.fetchall()
    cursor.close()

    print(items)
    if len(items) == 0:
        return ErrorModel(code=404, message="CCTVs not found")

    cameras = []
    for item in items:
        camera = Camera(
            id=item[0],
            name=item[1],
            latitude=item[2],
            longitude=item[3],
            inService=bool(item[4]),
            streamingUrl=item[5]
        )
        cameras.append(camera)

    return cameras


@app.get(
    '/camera/{id}',
    response_model=Union[Camera, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def find_camera_byid(id: str) -> Union[Camera, ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM camera WHERE id = %s;"
    cursor.execute(query, [id])
    item = cursor.fetchone()
    cursor.close()
    print(item)
    if item is None:
        print("Printing 404")
        return ErrorModel(code=404, message="CCTV not found")
    else:
        return Camera(id=item[0], name=item[1], latitude=item[2], longitude=item[3], inService=bool(item[4]),
                      streamingUrl=item[5])


@app.delete(
    '/camera/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def delete_camera(id: str) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "DELETE FROM camera WHERE id=%s"
    cursor.execute(query, id)
    conn.commit()
    cursor.close()


@app.put(
    '/camera/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def update_camera(id: str, body: Camera = ...) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "UPDATE camera SET name=%s, latitude=%s, longitude=%s, inService=%s, streamingUrl=%s WHERE id=%s"
    cursor.execute(query, (body.name, body.latitude, body.longitude, body.inService, body.streamingUrl, id))
    conn.commit()
    cursor.close()


@app.post(
    '/cameraimage',
    response_model=Union[None, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def add_cameraimage(body: Cameraimage) -> Union[None, ErrorModel]:
    try:
        cameraImageData = body.dict()
        result = cameraImage.insert_one(cameraImageData)
        if not result.inserted_id:
            return ErrorModel(code=500, message="Failed to add Camera Image data")
    except Exception as e:
        return ErrorModel(code=500, message=str(e))


@app.get(
    '/cameraimage/{id}',
    response_model=Union[Cameraimage, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def find_cameraimage_byid(id: str) -> Union[Cameraimage, ErrorModel]:
    cameraData = cameraImage.find_one({"cameraId": id})
    if cameraData:
        cameraimage = Cameraimage(
            cameraId=cameraData['cameraId'],
            timestamp=cameraData['timestamp'],
            url=cameraData['url']
        )
        return cameraimage
    else:
        return ErrorModel(code=404, message="No Camera Image found")


@app.delete(
    '/cameraimage/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def delete_cameraimage(id: str) -> Union[None, ErrorModel]:
    deletequery = {"cameraId": id}
    cameraImage.delete_one(deletequery)


@app.put(
    '/cameraimage/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def update_cameraimage(id: str, body: Cameraimage = ...) -> Union[None, ErrorModel]:
    updatequery = {"cameraId": id}
    newvalues = {"$set": {"cameraId": body.cameraId, "timestamp": body.timestamp, "url": body.url}}
    cameraImage.update_one(updatequery, newvalues)


@app.get(
    '/cameraimages',
    response_model=Union[List[Cameraimage], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def get_cameraimage_list() -> Union[List[Cameraimage], ErrorModel]:
    cameraimages = []
    for i in cameraImage.find():
        cameraimage = Cameraimage(
            cameraId=i["cameraId"],
            timestamp=i["timestamp"],
            url=i["url"]
        )
        cameraimages.append(cameraimage)
    if not cameraimages:
        return ErrorModel(code=404, message="No Camera Images found")
    return cameraimages


@app.post(
    '/iotanalytics',
    response_model=Union[None, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def add_iotanalytics(body: Iotanalytics) -> Union[None, ErrorModel]:
    try:
        iotData = body.dict()
        result = iotAnalytics.insert_one(iotData)
        if not result.inserted_id:
            return ErrorModel(code=500, message="Failed to add IoT analytics data")
    except Exception as e:
        return ErrorModel(code=500, message=str(e))


@app.get(
    '/iotanalytics/{id}',
    response_model=Union[List[Iotanalytics], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def find_iotanalytics_byid(id: str) -> Union[List[Iotanalytics], ErrorModel]:
    iotanalytics = []
    for i in iotAnalytics.find({"iotId": id}):
        iot = Iotanalytics(
            iotId=i['iotId'],
            timestamp=i['timestamp'],
            totalFlow=i['totalFlow'],
            avgOccupancy=i['avgOccupancy'],
            avgSpeed=i['avgSpeed'],
            incidents=i['incidents']
        )
        iotanalytics.append(iot)
    if not iotanalytics:
        return ErrorModel(code=404, message="No IOT Analytics found")
    return iotanalytics

@app.delete(
    '/iotanalytics/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def delete_iotanalytics(id: str) -> Union[None, ErrorModel]:
    deletequery = {"iotId": id}
    iotAnalytics.delete_one(deletequery)


@app.put(
    '/iotanalytics/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def update_iotanalytics(id: str, body: Iotanalytics = ...) -> Union[None, ErrorModel]:
    updatequery = {"iotId": id}
    newvalues = {"$set": {"iotId": body.iotId, "timestamp": body.timestamp, "totalFlow": body.totalFlow,
                          "avgOccupancy": body.avgOccupancy, "avgSpeed": body.avgSpeed, "incidents": body.incidents}}
    iotAnalytics.update_one(updatequery, newvalues)


@app.get(
    '/iotanalyticss',
    response_model=Union[List[Iotanalytics], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def get_iotanalytics_list() -> Union[List[Iotanalytics], ErrorModel]:
    iotanalytics = []
    for i in iotAnalytics.find():
        iot = Iotanalytics(
            iotId=i["iotId"],
            timestamp=i["timestamp"],
            totalFlow=i["totalFlow"],
            avgOccupancy=i["avgOccupancy"],
            avgSpeed=i["avgSpeed"],
            incidents=i["incidents"]
        )
        iotanalytics.append(iot)

    if not iotanalytics:
        return ErrorModel(code=404, mesage="No IOT Analytics found")
    return iotanalytics


@app.post(
    '/iotstation',
    response_model=Union[None, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def add_iotstation(body: Iotstation) -> Union[None, ErrorModel]:
    try:
        cursor = conn.cursor()
        query = "INSERT INTO iotStation (id, name, latitude, longitude, stationType) VALUES (%s, %s, %s, %s, %s)"
        cursor.execute(query, (body.id, body.name, body.latitude, body.longitude, body.stationType))
        conn.commit()
        cursor.close()
    except Exception as e:
        return ErrorModel(code=500, message=str(e))


@app.get(
    '/iotstation/{id}',
    response_model=Iotstation,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def find_iotstation_byid(id: str) -> Union[Iotstation, ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM iotStation WHERE id = %s;"
    cursor.execute(query, [id])
    item = cursor.fetchone()
    cursor.close()
    if item is None:
        return ErrorModel(code=404, message="IOT Station not found")
    return Iotstation(id=item[0], name=item[1], latitude=item[2], longitude=item[3], stationType=item[4])


@app.delete(
    '/iotstation/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def delete_iotstation(id: str) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "DELETE FROM iotStation WHERE id=%s"
    cursor.execute(query, id)
    conn.commit()
    cursor.close()


@app.put(
    '/iotstation/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def update_iotstation(id: str, body: Iotstation = ...) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "UPDATE iotStation SET name=%s, latitude=%s, longitude=%s, stationType=%s WHERE id=%s"
    cursor.execute(query, (body.name, body.latitude, body.longitude, body.stationType, id))
    conn.commit()
    cursor.close()


@app.get(
    '/iotstations',
    response_model=Union[List[Iotstation], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def get_iotstation_list() -> Union[List[Iotstation], ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM iotStation;"
    cursor.execute(query)
    items = cursor.fetchall()
    cursor.close()

    if items is None:
        return ErrorModel(code=404, message="IOT Stations not found")

    iotStations = []
    for item in items:
        iotStation = Iotstation(
            id=item[0], name=item[1], latitude=item[2], longitude=item[3], stationType=item[4]
        )
        iotStations.append(iotStation)

    return iotStations


@app.post(
    '/servicerequest',
    response_model=Union[None, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def add_servicerequest(body: Servicerequest) -> Union[None, ErrorModel]:
    try:
        cursor = conn.cursor()
        query = "INSERT INTO serviceRequest (id, date, service, description, deviceType, deviceId) VALUES (%s, %s, %s, %s, %s, %s)"
        cursor.execute(query, (body.id, body.date, body.service, body.description, body.deviceType, body.deviceId))
        conn.commit()
        cursor.close()
    except Exception as e:
        return ErrorModel(code=500, message=str(e))


@app.get(
    '/servicerequest/{id}',
    response_model=Union[Servicerequest, ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def find_servicerequest_byid(id: str) -> Union[Servicerequest, ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM serviceRequest WHERE id = %s;"
    cursor.execute(query, [id])
    item = cursor.fetchone()
    cursor.close()
    if item is None:
        return ErrorModel(code=404, message="Service Request not found")
    return Servicerequest(id=item[0],
                          date=item[1],
                          service=item[2],
                          description=item[3],
                          deviceType=item[4],
                          deviceId=item[5])


@app.delete(
    '/servicerequest/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def delete_servicerequest(id: str) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "DELETE FROM serviceRequest WHERE id=%s"
    cursor.execute(query, id)
    conn.commit()
    cursor.close()


@app.put(
    '/servicerequest/{id}',
    response_model=None,
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '404': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def update_servicerequest(id: str, body: Servicerequest = ...) -> Union[None, ErrorModel]:
    cursor = conn.cursor()
    query = "UPDATE serviceRequest SET date=%s, service=%s, description=%s, deviceType=%s, deviceId=%s WHERE id=%s"
    cursor.execute(query, (body.date, body.service, body.description, body.deviceType, body.deviceId, id))
    conn.commit()
    cursor.close()


@app.get(
    '/servicerequests',
    response_model=Union[List[Servicerequest], ErrorModel],
    responses={
        '400': {'model': ErrorModel},
        '401': {'model': ErrorModel},
        '500': {'model': ErrorModel},
    },
)
def get_servicerequest_list() -> Union[List[Servicerequest], ErrorModel]:
    cursor = conn.cursor()
    query = "SELECT * FROM serviceRequest;"
    cursor.execute(query)
    items = cursor.fetchall()
    cursor.close()

    if items is None:
        return ErrorModel(code=404, message="Service Requests not found")

    requests = []
    for item in items:
        servicerequest = Servicerequest(
            id=item[0],
            date=item[1],
            service=item[2],
            description=item[3],
            deviceType=item[4],
            deviceId=item[5]
        )
        requests.append(servicerequest)

    return requests
